
//triger stok
DELIMITER $$
  CREATE TRIGGER nombretrigger AFTER 
    INSERT ON salida
     FOR EACH ROW 

   BEGIN
     UPDATE productos SET stock = stock - NEW.cantidad 
     WHERE productos.idproductos = NEW.id_producto;
    END;$$
DELIMITER ;

-----------------------------

///Trigger despues de insertar una tabla insertas en otra tabla

DELIMITER $$
CREATE TRIGGER tpermisos AFTER INSERT ON usuarios FOR EACH ROW 
BEGIN
  INSERT INTO permisos (id_usuario)
  VALUES (new.idusuario);


END $$
DELIMITER ;


//despues de eliminar una fila eliminame una tabla
DELIMITER $$
CREATE TRIGGER deleteprueba AFTER DELETE ON empresas
FOR EACH ROW BEGIN
    DELETE 
      FROM prueba;
END $$
DELIMITER ;



//procedure listar
DELIMITER $$
CREATE PROCEDURE sp_ubigeoDistrito(IN dis VARCHAR(250))
BEGIN
    SELECT * FROM  ubigeo WHERE  distrito LIKE CONCAT('%', dis , '%');
END $$
DELIMITER ;


//eliminar registros de la tabla y resetear autoincrement
DELIMITER $$
CREATE PROCEDURE sp_EliminarRegistrosTabla(in pNombreTabla VARCHAR(50))
BEGIN
 
    SET SQL_SAFE_UPDATES = 0;
    SET @SQL = CONCAT('DELETE FROM ', pNombreTabla);
 
    PREPARE stmt FROM @SQL;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
 
    SET @SQL = CONCAT('ALTER TABLE ', pNombreTabla, ' AUTO_INCREMENT = 1');
 
    PREPARE stmt FROM @SQL;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
 
    SET SQL_SAFE_UPDATES = 1;
 
END $$
DELIMITER;




--------------------------------------------
//innerjoin ingreso a producto
SELECT i.idingreso, i.cantidad, p.nombre FROM   ingreso i inner join  productos p on i.id_producto=p.idproductos;

---inner join dos 3 tablas
SELECT r.rol ,u.nombre, s.nombre from roles r 
INNER join usuarios u on r.idrol=u.id_rol
INNER join sedes s on s.idsede=u.id_sede









//comparaciones
Operador	Descripcion
=	Igual
<=>	Igual (Compara con seguridad valores NULL)
<>	Diferente
!=	Diferente
>	Mayor Que
>=	Mayor o Igual Que
<	Menor Que
<=	Menor o Igual Que
IN ( )	Valores que Coinciden en una Lista
NOT	Negar una Condición
BETWEEN	Valores en un Rango (incluye los extremos)
IS NULL	Verifica si el Valor es NULL
IS NOT NULL	Verifica si el Valor es diferente de NULL
LIKE	Definir un patrón de búsqueda y utiliza % y _
EXISTS	La condición se cumple si la subconsulta devuelve al menos una fila



//like

MySQL
SELECT * FROM clientes WHERE nombre LIKE '%m%';
1
SELECT * FROM clientes WHERE nombre LIKE '%m%';
En el código superior estamos buscando los clientes que contengan una ‘m’ en el nombre.

MySQL
SELECT * FROM clientes WHERE nombre LIKE 'M%';
1
SELECT * FROM clientes WHERE nombre LIKE 'M%';
En el código superior estamos buscando los clientes cuyo nombre comienza por ‘M’.

MySQL
SELECT * FROM clientes WHERE nombre LIKE '%a';
1
SELECT * FROM clientes WHERE nombre LIKE '%a';
En el código superior estamos buscando los clientes cuyo nombre termina con ‘a’.

MySQL
SELECT * FROM clientes WHERE nombre LIKE '_a%';
1
SELECT * FROM clientes WHERE nombre LIKE '_a%';
En el código superior estamos buscando los clientes cuyo nombre tiene como segundo caracter la ‘a’.

MySQL
SELECT * FROM clientes WHERE nombre LIKE '_______';
1
SELECT * FROM clientes WHERE nombre LIKE '_______';
En el código superior estamos buscando los clientes cuyo nombre tiene 7 caracteres de longitud.

MySQL
SELECT * FROM clientes WHERE nombre LIKE '%a%' or nombre LIKE '%r%' ;
1
SELECT * FROM clientes WHERE nombre LIKE '%a%' or nombre LIKE '%r%' ;
En el código superior estamos buscando los clientes cuyo nombre tiene una ‘a’ y una ‘r’.




-----resetear autoincrement
ALTER TABLE compras AUTO_INCREMENT = 1;
